{"name":"Jdeclarative","tagline":"declarative jquery plugins in your markup","body":"jDeclarative\r\n============\r\n\r\ndeclarative jquery plugins in your markup\r\n\r\n### Declaring plugins\r\n\r\njust provide a `data-plugin` attribute in your markup to any element you wish to bind a jQuery plugin to it, writing an object literal into the attribute to specify plugin name / options\r\n\r\n**you write this..**\r\n\r\n```html\r\n<input type=\"text\" data-plugin=\"datepicker: { showButtonPanel: true, minDate: -20, maxDate: '+1M +10D' }\" />\r\n```\r\n\r\n**instead of this..**\r\n```html\r\n<input id=\"datepickerInput\" type=\"text\" />\r\n```\r\n\r\n```js\r\n$('#datepickerInput').datepicker({\r\n  minDate: -20, \r\n  maxDate: '+1M +10D',\r\n  showButtonPanel: true\r\n});\r\n```\r\n\r\n**you can even bind multiple plugins on the same element**\r\n\r\n```html\r\n<input type=\"text\" placeholder=\"country lookup\" data-plugin=\"placeholder: {}, autocomplete: { source: [ 'Jordan', 'Syria', 'Egypt', 'Palestine', 'Turkey' ] }\" />\r\n```\r\n\r\n### Why \r\n\r\n- easier to inspect which element has a plugin, rather than looking up js / html files to figure out what plugin / dom elements relation\r\n- works with all jQuery plugins!\r\n\r\n\r\n### Credits\r\n\r\ninspired by KnockoutJs library\r\n","google":"UA-46473538-1","note":"Don't delete this file! It's used internally to help with page regeneration."}